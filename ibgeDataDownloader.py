# -*- coding: utf-8 -*-
"""
/***************************************************************************
 IbgeDataDownloader
                                 A QGIS plugin
 This plugin downloads data from IBGE
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-11-17
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Vinicius Etchebeur Medeiros DÃ³ria
        email                : vinicius_etchebeur@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, pyqtSignal, Qt, QModelIndex
from qgis.PyQt.QtGui import QIcon, QStandardItemModel, QStandardItem
from qgis.PyQt.QtWidgets import (
                                 QAction, QFileDialog, QProgressBar,
                                 QProgressDialog, QPushButton, QToolButton,
                                 QDialogButtonBox, QHeaderView, QAbstractItemView,
                                 QTreeWidgetItemIterator
                                )
from qgis.core import QgsTask, Qgis, QgsProject, QgsApplication
from html.parser import HTMLParser
import os, unicodedata, urllib, zipfile, tarfile, http, http.client, re
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .ibgeDataDownloader_dialog import IbgeDataDownloaderDialog

class MyHTMLParser(HTMLParser):
    ############################
    # PERSONALIZED HTML PARSER #
    ############################

    def __init__(self):
        """Constructor."""

        # Mother class constructor HTMLParser (subclass)
        super(MyHTMLParser, self).__init__()

        # Attribute that receive parent tree
        self.__parent__ = None
        # Attribute that receive childs tree
        self.__children__ = []
        # Attribute that receives child information
        self.resetChild()
        # Attribute that receives tag <tr> in and out information
        self.__trElement__ = False

    def handle_starttag(self, tag, attrs):
        """Overrides to feed __parent__ and __child__"""

        if tag == 'tr':
            self.__trElement__ = True
            #print(tag, self.__trElement__)

        if tag == 'a':
            for attr in attrs:
                if attr[1].startswith('/'):
                    # Set parent
                    self.__parent__ = attr[1]
                if not any(attr[1].startswith(item) for item in ('?', '/')):
                    # Set child name
                    self.__child__ = [attr[1]]
                    #print('adicionou handle_starttag')
            #print(tag, self.__child__)

    def handle_endtag(self, tag):
        """Overrides to feed __children__ and reset __child__"""

        if tag == 'tr':
            self.__trElement__ = False
            # If child is valid, append to __children__
            if self.__child__ != []:
                self.__children__.append(self.__child__)
            # Reset __child__
            self.resetChild()
            #print(tag, self.__trElement__)

    def handle_data(self, data):
        """Overrides to feed information about __child__"""

        # Remove white spaces at start / end of the string
        data = data.lstrip().rstrip()
        # Set child last modified date
        match = re.match(r'(\d+-\d+-\d+ \d+:\d+)', data)
        if match and self.__child__ != []:
            self.__child__.append(data)
            #print(self.__child__)
        # Set child file size using regular expression
        match = re.match(r'(\d+[A-Za-z])', data) # N...X
        if not match:
            match = re.match(r'(\d+\.?\d+[A-Za-z])', data) # N.N...X
        if match and self.__child__ != []:
            # Adds a space between value and unit and a B as sufix
            self.__child__.append('{} {}B'.format(data[:-1], data[-1]))
            #print(self.__child__)

    def getChildren(self):
        """Returns childs"""

        return self.__children__ if self.__children__ else None

    def getParent(self):
        """Returns parent"""

        return self.__parent__

    def resetChild(self):
        """Resets child attribute"""

        self.__child__ = []

    def resetChildren(self):
        """Resets children attribute"""

        self.__children__ = []

    def resetParent(self):
        """Resets parent attribute"""

        self.__parent__ = None


class MyProgressDialog(QProgressDialog):
    ###################
    # PROGRESS DIALOG #
    ###################

    def __init__(self):
        """Constructor."""

        # Mother class constructor QProgressDialog (subclass)
        super(MyProgressDialog, self).__init__()

        # Attribute that keeps the dialog opened
        self.__close__ = False

    def setClose(self, var):
        """Defines if the dialog can be closed"""

        self.__close__ = var

    def closeEvent(self, event):
        """Overrides closeEvent (closing dialog)"""

        if self.__close__:
            super(MyProgressDialog, self).closeEvent(event)
        else:
            event.ignore()


class WorkerDownloadManager(QgsTask):
    ###########################################
    # DOWNLOADS AND EXTRACTS A COMPACTED FILE #
    ###########################################

    # Signals emitted
    textProgress = pyqtSignal(str) # text for progress dialog
    processResult = pyqtSignal(list) # process result
    barMax = pyqtSignal(float) # max number of progress bar

    def __init__(self, iface, desc, listUrls, dirPad, listUnzipOptions):
        """Constructor."""

        # Mother class constructor QgsTask (subclass)
        super(WorkerDownloadManager, self).__init__(desc, flags=QgsTask.CanCancel)
        
        # Saving references
        self.iface = iface
        self.project = QgsProject.instance()
        self.msgBar = self.iface.messageBar()
        self.listUrls = listUrls
        self.totalUrls = len(self.listUrls)
        self.dirPad = dirPad
        self.pluginIcon = QIcon(':/plugins/ibgedatadownloader/icon.png')
        self.unzip = listUnzipOptions[1] if listUnzipOptions[0] else False

    def _getFileSize(self, url):
        """Returns file size of the url"""

        u = urllib.request.urlopen(url)
        meta = u.headers
        fileSize = int(meta.get('Content-Length'))
        return fileSize

    def finished(self, result):
        """This function is called automatically when the task is completed and is
        called from the main thread so it is safe to interact with the GUI etc here"""

        if result is False:
            self.msgBar.pushMessage(self.tr(u'Error'), self.tr(u'Oops, something went wrong! Please, contact the developer by e-mail.'), Qgis.Critical, duration=0)
        else:
            self.msgBar.pushMessage(self.tr(u'Success'), self.tr(u'Process completed.'), Qgis.Success, duration=0)

    def run(self):
        """Principal method that is automatically called when the task runs."""

        fails = 0
        for n, u in enumerate(self.listUrls):
            url = u[1]
            fileSize = self._getFileSize(url)

            # Adjusting progress bar
            self.barMax.emit(100)

            fileName = os.path.basename(url)
            outFile = os.path.join(self.dirPad, fileName)
            try:
                u = urllib.request.urlopen(url)
            except:
                self.processResult.emit([self.tr(u'Failed to open url {}.').format(url), Qgis.Critical])
                #return False
                fails += 1
                continue
            
            # Creates directory for product, if it doesn't exists
            if not os.path.isdir(self.dirPad):
                os.makedirs(self.dirPad)
            
            # Downloading file
            f = open(outFile, 'wb')
            msg = self.tr('{n}/{total} - Downloading {file}...').format(n=n+1, total=self.totalUrls, file=fileName)
            self.textProgress.emit(msg)
            #print "Downloading: %s Bytes: %s" % (outFile, file_size)
            file_size_dl = 0
            block_sz = 8192
            while True:
                buffer = u.read(block_sz)
                if not buffer:
                    break
                file_size_dl += len(buffer)
                f.write(buffer)
                self.setProgress(file_size_dl*100/fileSize)
                #status = r"%10d  [%3.2f%%]" % (file_size_dl, file_size_dl * 100. / file_size)
                #status = status + chr(8)*(len(status)+1)
                #print status,
            f.close()

            # Extracting downloaded files
            if self.unzip and any(fileName.endswith(ext) for ext in ('.zip', '.tar')):
                msg = self.tr(u'{n}/{total} - Extracting files from {file}...').format(n=n+1, total=self.totalUrls, file=fileName)
                self.textProgress.emit(msg)
                if fileName.endswith('zip'):
                    # Extract zip file
                    with zipfile.ZipFile(os.path.join(self.dirPad, fileName), 'r') as zip_ref:
                        zip_ref.extractall(self.dirPad)
                else:
                    # Extract tar file
                    with tarfile.open(os.path.join(self.dirPad, fileName), 'r') as tar_ref:
                        tar_ref.extractall(self.dirPad)

        self.processResult.emit([self.tr(u'Process completed with {fails} fails. Check your file(s) at <a href="{saida}">{saida}</a>.').format(fails=fails, saida=self.dirPad), Qgis.Success])
        return True


class IbgeDataDownloader:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'IbgeDataDownloader_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Download data from IBGE')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.firstStart = None

        # Plugin icon
        self.pluginIcon = QIcon(':/plugins/ibgedatadownloader/icon.png')

        # Access to QGIS status bar and progress button
        self.statusBar = self.iface.statusBarIface()
        for i in self.statusBar.children():
            if type(i) == QToolButton:
                for j in i.children():
                    if type(j) == QProgressBar:
                        self.qgisProgressButton = i
                        break

        # Avoid headers limit error
        http.client._MAXHEADERS = 10000

        # Saving references
        self.msgBar = self.iface.messageBar()
        self.taskManager = QgsApplication.taskManager()
        self.htmlParser = MyHTMLParser()
        self.baseUrl = 'https://geoftp.ibge.gov.br/'
        self.itemsExpanded = []
        self.selectedProductsUrl = []
        self.dirSaida = ''

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('IbgeDataDownloader', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/ibgeDataDownloader/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'IBGE Data Downloader'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.firstStart = True

    def unload(self):
        """Remove the plugin menu item and icon from QGIS GUI."""

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Download data from IBGE'),
                action)
            self.iface.removeToolBarIcon(action)

    def _progressDialog(self, value):
        """Creates and returns the progress dialog and bar"""

        dialog = MyProgressDialog()
        dialog.setWindowTitle(self.tr(u'Processing. Please, wait...'))
        dialog.setLabelText(self.tr(u'Downloading data'))
        dialog.setWindowIcon(self.pluginIcon)
        progressBar = QProgressBar(dialog)
        progressBar.setTextVisible(True)
        progressBar.setValue(value)
        dialog.setBar(progressBar)
        dialog.setMinimumWidth(300)
        dialog.setModal(True)
        dialog.setWindowFlag(Qt.WindowCloseButtonHint, False)
        #dialog.canceled.connect(self.canceledProgressDialog)
        '''
        for i in dialog.children():
            if type(i) == QPushButton:
                i.setEnabled(False)
                i.setVisible(False)
        '''
        return dialog, progressBar

    def setMaximumProgressBar(self, maxN):
        """Sets maximum of the progress bar"""

        #self.progressBar.reset()
        self.progressValue = 0
        self.progressBar.setRange(self.progressValue, int(maxN))
        self.progressBar.setValue(self.progressValue)
        #print(int(maxN))

    def canceledProgressDialog(self):
        """Shows progress dialog when it's 'canceled' too soon."""

        self.progressBar.setValue(self.progressValue)
        self.dlgBar.show()

    def setProgressValue(self, val):
        """Defines value of progress bar."""

        self.progressValue = int(val)
        self.progressBar.setValue(self.progressValue)

    def setProgressText(self, txt):
        """Defines the label of the progress dialog."""

        self.dlgBar.setLabelText(txt)
        if self.tr('Extracting files') in txt:
            self.progressBar.setRange(0, 0)
            self.progressBar.setValue(0)

    def dlgDirSaida(self, checked):
        """Opens dialog to indicate the output directory."""

        self.dirSaida = QFileDialog.getExistingDirectory(QFileDialog(), self.tr(u'Output directory'), '')
        self.dlg.lineEdit_Saida.setText(self.dirSaida)

        if self.dirSaida != '':
            self._checkOkButton()
        else:
            self.dlg.button_box.button(QDialogButtonBox.Ok).setEnabled(False)

    def threadResult(self, result):
        """Keeps reference of the worker result"""

        self.pluginResult = result
        self.endingProcess()

    def endingProcess(self):
        """Closes progress dialog and finishes the job"""

        self.dlgBar.setClose(True)
        self.dlgBar.close()

        if self.pluginResult[1] == Qgis.Critical:
            msgType = self.tr('Error')
        else:
            msgType = self.tr('Success')

        self.msgBar.clearWidgets()
        self.msgBar.pushMessage(msgType, self.pluginResult[0], self.pluginResult[1], duration=0)

    def _padronizaTexto(self, texto):
        """Standardizes texts to check equality."""

        try:
            texto = unicode(texto, 'utf-8')
        except (TypeError, NameError):
            pass
        texto = unicodedata.normalize('NFD', texto)
        texto = texto.encode('ascii', 'ignore')
        texto = texto.decode("utf-8")
        texto = texto.replace(' ', '_')
        return str(texto.lower())

    def populateComboListBox(self, objeto, lista, coluna = '', inicial = ''):
        """Populates a list or combo object."""

        objeto.clear()
        if inicial != '':
            objeto.addItem(inicial)
        for elemento in lista:
            if coluna == '':
                e = elemento
            else:
                e = elemento[0] + ' - ' + elemento[coluna]
            try:
                item = unicode(e)
            except TypeError:
                item = str(e)
            objeto.addItem(item)

    def treeViewClicked(self, modelIndex):
        """Slot of clicked signal that constructs the items URL and enables the OK button"""

        if modelIndex.column() == 0:
            # Gets all parents and the item to create the URL
            parents = [modelIndex.data()] if modelIndex.data() not in self.baseUrl else []
            parent = modelIndex.parent()
            #print(modelIndex.parent(), modelIndex.parent().data())
            while parent.data() != None and parent.data() not in self.baseUrl:
                parents.insert(0, parent.data())
                parent = parent.parent()
            productUrl = '{base}{subPath}'.format(base=self.baseUrl, subPath='/'.join(parents))

            # Add or remove from products variable
            model = modelIndex.model()
            node = model.itemFromIndex(modelIndex)
            #print(node.checkState())
            if node.checkState() == Qt.CheckState.Checked:
                self.selectedProductsUrl.append([modelIndex, productUrl])
                qtdProducts = len(self.selectedProductsUrl)
                self.dlg.label_ProductsSelected.setText(self.tr(u'{} Product(s) selected'.format(qtdProducts)))
            else:
                for p in self.selectedProductsUrl:
                    if p[1] == productUrl:
                        self.selectedProductsUrl.remove(p)
                qtdProducts = len(self.selectedProductsUrl)
                self.dlg.label_ProductsSelected.setText(self.tr(u'{} Product(s) selected'.format(qtdProducts)))

            # Check if the unzip option can be enabled
            if self.selectedProductsUrl:
                for p in self.selectedProductsUrl:
                    if any(p[1].endswith(ext) for ext in ('.zip', '.tar')):
                        self.dlg.checkBox_Unzip.setEnabled(True)
                        break
                    else:
                        self.dlg.checkBox_Unzip.setEnabled(False)
            else:
                self.dlg.checkBox_Unzip.setEnabled(False)

            # Check if OK button can be enabled
            self._checkOkButton()

    def treeViewExpanded(self, modelIndex):
        """Slot of expanded signal that adds item's children to the tree"""

        if modelIndex not in self.itemsExpanded:
            # Deletes first empty child
            model = modelIndex.model()
            node = model.itemFromIndex(modelIndex)
            child = node.child(0)
            if child and child.text() == '':
                node.removeRow(0)

            # Gets item's parents
            parents = [modelIndex.data()] if modelIndex.data() not in self.baseUrl else []
            parent = modelIndex.parent()
            #print(modelIndex.parent(), modelIndex.parent().data())
            while parent.data() != None and parent.data() not in self.baseUrl:
                parents.insert(0, parent.data())
                parent = parent.parent()

            # Adds item's children
            #print('/'.join(parents))
            url = '{base}{subPath}/'.format(base=self.baseUrl, subPath='/'.join(parents))
            #print(url)
            self.htmlParser.resetParent()
            self.htmlParser.resetChildren()
            self.htmlParser.resetChild()
            self.htmlParser.feed(http.client.parse_headers(urllib.request.urlopen(url)).as_string())
            children = self.htmlParser.getChildren()
            
            # Add children to the tree
            #print(children)
            for child in children:
                #print('adicionando {} ao item {}'.format(child.replace('/', ''), modelIndex.data()))
                child[0] = child[0].replace('/', '')
                self._addTreeViewParentChildNode(modelIndex, child)

            # Add the item to expanded list
            self.itemsExpanded.append(modelIndex)

    def _addTreeViewParentChildNode(self, parent, child=None):
        """Adds parent or children nodes to the QTreeView"""

        model = self.dlg.treeView.model()
        if not model:
            model = QStandardItemModel(0, 3)
            model.setHorizontalHeaderLabels([self.tr('Products Tree'), self.tr('File size'), self.tr('Last modified')])

        # Creates standard empty item
        emptyNode = QStandardItem('')

        if not child:
            parentNode = QStandardItem(parent)
            parentNode.appendRow([emptyNode, emptyNode, emptyNode])
            model.appendRow([parentNode, emptyNode, emptyNode])
        else:
            if type(parent) == QModelIndex:
                #print(u'Ã© QModelIndex', child)
                parentNode = model.itemFromIndex(parent)
                childNode = QStandardItem(child[0])
            if '.' not in childNode.text():
                if not childNode.hasChildren():
                    childNode.appendRow(emptyNode)
            else:
                childNode.setCheckable(True)
            #print(child)
            try:
                childNodeSize = QStandardItem(child[2])
            except IndexError:
                childNodeSize = emptyNode
            try:
                childNodeDate = QStandardItem(child[1])
            except IndexError:
                childNodeDate = emptyNode
            parentNode.appendRow([childNode, childNodeSize, childNodeDate])
            #print(childNode.text(), childNode.row(), childNode.column())
            #print(childNodeSize.text(), childNodeSize.row(), childNodeSize.column())
            #print(childNodeDate.text(), childNodeDate.row(), childNodeDate.column())

        self.dlg.treeView.setModel(model)

    def uncheckAll(self):
        """Slot of uncheck all button clicked signal that unchecks all products and options"""

        # Iterate trough products list
        model = self.dlg.treeView.model()
        for p in self.selectedProductsUrl:
            modelIndex = p[0]
            node = model.itemFromIndex(modelIndex)
            node.setCheckState(False)
            #self.treeViewClicked(modelIndex)
        
        # Set label of selected products
        self.dlg.label_ProductsSelected.setText(self.tr(u'0 Product(s) selected'))
        # Clear products urls list
        self.selectedProductsUrl = []
        # Uncheck options
        self.dlg.checkBox_Unzip.setChecked(False)
        self.dlg.checkBox_Unzip.setEnabled(False)
        self._checkOkButton()

    def _configDialogs(self):
        """Configures dialog and connects signals/slots."""

        # Set window icon
        self.dlg.setWindowIcon(self.pluginIcon)

        # Adjusting headers size mode
        header = self.dlg.treeView.header()
        header.setSectionResizeMode(QHeaderView.ResizeToContents)

        # Sets selection mode
        self.dlg.treeView.setSelectionMode(QAbstractItemView.NoSelection)

        # Signals
        self.dlg.pushButton_Dir.clicked.connect(self.dlgDirSaida)
        self.dlg.treeView.clicked.connect(self.treeViewClicked)
        self.dlg.treeView.expanded.connect(self.treeViewExpanded)
        self.dlg.pushButton_UncheckAll.clicked.connect(self.uncheckAll)

        # Populate tree for product selection
        #url = '{}organizacao_do_territorio/'.format(self.baseUrl)
        url = self.baseUrl
        
        # Add top parent to the tree
        parent = os.path.basename(os.path.normpath(url))
        self._addTreeViewParentChildNode(parent)

        # Disable OK button
        self.dlg.button_box.button(QDialogButtonBox.Ok).setEnabled(False)
        # Disable options
        self.dlg.checkBox_Unzip.setEnabled(False)

    def _checkOkButton(self):
        """Enables or disables OK button"""

        for p in self.selectedProductsUrl:
            if p[1][-4] != '':
                if p[1][-4] == '.' and self.dirSaida != '':
                    # Enable OK button
                    self.dlg.button_box.button(QDialogButtonBox.Ok).setEnabled(True)
                else:
                    # Disable OK button
                    self.dlg.button_box.button(QDialogButtonBox.Ok).setEnabled(False)

    def _execute(self):
        """Does the real work:
           -Download file
           -Extract file, if checked
           -Add selected statistical data *** NOT IMPLEMENTED
           -Add layer to legend panel *** NOT IMPLEMENTED"""

        # Preparing product download
        self.dlgBar, self.progressBar = self._progressDialog(0)
        self.dlgBar.show()
        self.msgBar.pushMessage(self.tr('Processing'), self.tr(u'Working on selected data...'), Qgis.Info, duration=0)
        
        # Instantiate the background worker and connects slots to signals
        self.taskDesc = self.tr(u'Processing selected data.')
        self.threadTask = WorkerDownloadManager(
                                                self.iface,
                                                self.taskDesc,
                                                self.selectedProductsUrl,
                                                self.dirSaida,
                                                [self.dlg.checkBox_Unzip.isEnabled(), self.dlg.checkBox_Unzip.isChecked()]
                                                )
        self.threadTask.begun.connect(lambda: self.setProgressText(self.taskDesc))
        self.threadTask.progressChanged.connect(self.setProgressValue)
        self.threadTask.barMax.connect(self.setMaximumProgressBar)
        self.threadTask.textProgress.connect(self.setProgressText)
        self.threadTask.processResult.connect(self.threadResult)
        self.threadTask.taskCompleted.connect(self.endingProcess)
        #self.threadTask.taskTerminated.connect(lambda: self.dlgBar.close())
        self.taskManager.addTask(self.threadTask)
        # Hide QGIS native progress button
        self.qgisProgressButton.hide()

    def run(self):
        """Run method - plugin callback"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.firstStart == True:
            self.firstStart = False
            self.dlg = IbgeDataDownloaderDialog()
            self._configDialogs()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            self._execute()
