# -*- coding: utf-8 -*-
"""
/***************************************************************************
 IbgeDataDownloader
                                 A QGIS plugin
 This plugin downloads data from IBGE
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-11-17
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Vinicius Etchebeur Medeiros DÃ³ria
        email                : vinicius_etchebeur@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, pyqtSignal, Qt
from qgis.PyQt.QtGui import QIcon, QStandardItemModel, QStandardItem
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QProgressBar, QProgressDialog, QPushButton, QToolButton
from qgis.core import QgsTask, Qgis, QgsProject, QgsApplication
from html.parser import HTMLParser
import os, unicodedata, urllib, zipfile, http
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .ibgeDataDownloader_dialog import IbgeDataDownloaderDialog

class MyHTMLParser(HTMLParser):
    ############################
    # PERSONALIZED HTML PARSER #
    ############################

    def __init__(self):
        """Constructor."""
        # Mother class constructor HTMLParser (subclass)
        super(MyHTMLParser, self).__init__()
        
        # Attribute that receive parent tree
        self.__parent__ = None
        # Attribute that receive childs tree
        self.__children__ = []

    def handle_starttag(self, tag, attrs):
        """Overrides to feed __parent__ and __children__ attributes"""
        if tag == 'a':
            for attr in attrs:
                if attr[1].startswith('/'):
                    # Set parent
                    self.__parent__ = attr[1]
                if not any(attr[1].startswith(item) for item in ('?', '/')):
                    # Add child
                    self.__children__.append(attr[1])

    def getChildren(self):
        """Returns childs"""
        return self.__children__ if self.__children__ else None

    def getParent(self):
        """Returns parent"""
        return self.__parent__

    def resetChildren(self):
        """Resets children attribute"""
        self.__children__ = []
    
    def resetParent(self):
        """Resets parent attribute"""
        self.__parent__ = None


class MyProgressDialog(QProgressDialog):
    ###################
    # PROGRESS DIALOG #
    ###################

    def __init__(self):
        """Constructor."""
        # Mother class constructor QProgressDialog (subclass)
        super(MyProgressDialog, self).__init__()

        # Attribute that keeps the dialog opened
        self.__close__ = False

    def setClose(self, var):
        """Defines if the dialog can be closed"""
        self.__close__ = var

    def closeEvent(self, event):
        """Overrides closeEvent (closing dialog)"""
        if self.__close__:
            super(MyProgressDialog, self).closeEvent(event)
        else:
            event.ignore()


class WorkerDownloadManager(QgsTask):
    ###########################################
    # DOWNLOADS AND EXTRACTS A COMPACTED FILE #
    ###########################################

    # Signals emitted
    textProgress = pyqtSignal(str) # text for the progress dialog
    processResult = pyqtSignal(list) # process result
    def __init__(self, iface, desc, url, dirPad, outFile, barMax):
        """Constructor."""
        # Mother class constructor QgsTask (subclass)
        super(WorkerDownloadManager, self).__init__(desc, flags=QgsTask.CanCancel)
        
        # Saving references
        self.iface = iface
        self.project = QgsProject.instance()
        self.msgBar = self.iface.messageBar()
        self.outFile = outFile
        self.url = url
        self.dirPad = dirPad
        self.pluginIcon = QIcon(':/plugins/ibgedatadownloader/icon.png')
        self.barMax = barMax

    def finished(self, result):
        """This function is called automatically when the task is completed and is
        called from the main thread so it is safe to interact with the GUI etc here"""
        if result is False:
            self.msgBar.pushMessage(u'Error',u'Oops, something went wrong! Please, contact the developer by e-mail.', Qgis.Critical, duration=0)
        else:
            self.msgBar.pushMessage(u'Success',u'Download completed and files extracted.', Qgis.Success, duration=0)

    def run(self):
        """Principal method that is automatically called when the task runs."""

        # Adjusting progress bar
        file_size_dl = 0
        self.setProgress(file_size_dl)

        fileName = self.outFile.split('\\')[-1]
        try:
            u = urllib.request.urlopen(self.url)
        except:
            self.processResult.emit([u'Failed to open url {}.'.format(self.url), Qgis.Critical])
            return False
        
        # Creates directory for product year, if it doesn't exists
        if not os.path.isdir(self.dirPad):
            os.makedirs(self.dirPad)
        
        # Open file
        f = open(self.outFile, 'wb')
        msg = 'Downloading {}...'.format(fileName)
        self.textProgress.emit(msg)
        #print "Downloading: %s Bytes: %s" % (self.outFile, file_size)

        file_size_dl = 0
        block_sz = 8192
        while True:
            buffer = u.read(block_sz)
            if not buffer:
                break
            file_size_dl += len(buffer)
            f.write(buffer)
            self.setProgress(file_size_dl)
            #status = r"%10d  [%3.2f%%]" % (file_size_dl, file_size_dl * 100. / file_size)
            #status = status + chr(8)*(len(status)+1)
            #print status,
        f.close()

        # Extracting downloaded files
        msg = u'Extracting files from {}...'.format(fileName)
        self.textProgress.emit(msg)
        with zipfile.ZipFile(os.path.join(self.dirPad, fileName), 'r') as zip_ref:
            zip_ref.extractall(self.dirPad)

        self.processResult.emit([u'Download completed and files extracted.', Qgis.Success])
        return True


class IbgeDataDownloader:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'IbgeDataDownloader_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Download data from IBGE')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.firstStart = None

        # Plugin icon
        self.pluginIcon = QIcon(':/plugins/ibgedatadownloader/icon.png')

        # Access to QGIS status bar and progress button
        self.statusBar = self.iface.statusBarIface()
        for i in self.statusBar.children():
            if type(i) == QToolButton:
                for j in i.children():
                    if type(j) == QProgressBar:
                        self.qgisProgressButton = i
                        break

        # Saving references
        self.msgBar = self.iface.messageBar()
        self.taskManager = QgsApplication.taskManager()
        self.htmlParser = MyHTMLParser()

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('IbgeDataDownloader', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/ibgeDataDownloader/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'IBGE Data Downloader'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.firstStart = True

    def unload(self):
        """Remove the plugin menu item and icon from QGIS GUI."""

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Download data from IBGE'),
                action)
            self.iface.removeToolBarIcon(action)

    def _progressDialog(self, value):
        """Creates and returns the progress dialog and bar"""

        dialog = MyProgressDialog()
        dialog.setWindowTitle(u'Processing. Please, wait...')
        dialog.setLabelText(u'Downloading data')
        dialog.setWindowIcon(self.pluginIcon)
        progressBar = QProgressBar(dialog)
        progressBar.setTextVisible(True)
        progressBar.setMaximum(self.barMax)
        progressBar.setValue(value)
        dialog.setBar(progressBar)
        dialog.setMinimumWidth(300)
        dialog.setModal(True)
        dialog.setWindowFlag(Qt.WindowCloseButtonHint, False)
        dialog.canceled.connect(self.canceledProgressDialog)
        for i in dialog.children():
            if type(i) == QPushButton:
                i.setEnabled(False)
                i.setVisible(False)
        return dialog, progressBar

    def canceledProgressDialog(self):
        """Shows progress dialog when it's 'canceled' too soon."""

        self.progressBar.setValue(self.progressValue)
        self.dlgBar.show()

    def setProgressValue(self, val):
        """Defines value of progress bar."""

        self.progressValue = int(val)
        self.progressBar.setValue(self.progressValue)

    def setProgressText(self, txt):
        """Defines the label of the progress dialog."""

        self.dlgBar.setLabelText(txt)
        if txt.startswith('Extracting'):
            self.progressBar.setMaximum(0)

    def dlgDirSaida(self):
        """Opens dialog to indicate the output directory."""

        self.dirSaida = QFileDialog.getExistingDirectory(QFileDialog(), self.tr(u'Output directory'), '')
        self.dlg.lineEdit_Saida.setText(self.dirSaida)

    def threadResult(self, result):
        """Keeps reference of the worker result"""

        self.pluginResult = result
        self.endingProcess()

    def endingProcess(self):
        """Closes progress dialog and finishes the job"""

        self.dlgBar.setClose(True)
        self.dlgBar.close()

        if self.pluginResult[1] == Qgis.Critical:
            msgType = 'Error'
        else:
            msgType = 'Success'

        self.msgBar.clearWidgets()
        self.msgBar.pushMessage(msgType, self.pluginResult[0], self.pluginResult[1], duration=0)

    def _padronizaTexto(self, texto):
        """Standardizes texts to check equality."""

        try:
            texto = unicode(texto, 'utf-8')
        except (TypeError, NameError):
            pass
        texto = unicodedata.normalize('NFD', texto)
        texto = texto.encode('ascii', 'ignore')
        texto = texto.decode("utf-8")
        texto = texto.replace(' ', '_')
        return str(texto.lower())

    def populateComboListBox(self, objeto, lista, coluna = '', inicial = ''):
        """Populates a list or combo object."""

        objeto.clear()
        if inicial != '':
            objeto.addItem(inicial)
        for elemento in lista:
            if coluna == '':
                e = elemento
            else:
                e = elemento[0] + ' - ' + elemento[coluna]
            try:
                item = unicode(e)
            except TypeError:
                item = str(e)
            objeto.addItem(item)

    def treeViewClicked(self, modelIndex):
        print(modelIndex.row(), modelIndex.column(), modelIndex.data(), modelIndex.parent().data())

    def _addTreeViewParentChildrenNodes(self, parentName, childName=None):
        """Adds parent and/or children nodes to the QTreeView"""
        print(parentName, childName)

        model = self.dlg.treeView.model()
        if not model:
            model = QStandardItemModel()
            model.setHorizontalHeaderLabels(['Products tree'])

        if not childName:
            parentNode = QStandardItem(parentName)
            model.appendRow(parentNode)
        else:
            topNode = model.item(0)
            childNode = QStandardItem(childName)
            parentNode = None
            parentNodes = model.findItems(parentName)
            if len(parentNodes) == 0:
                print(len(parentNodes))
                print(topNode.hasChildren())
                a = True
                while a:
                    c = 1
                    childrenCount = topNode.rowCount()
                    print(childrenCount)
                    pNode = None
                    for i in range(childrenCount):
                        pNode = topNode.child(i)
                        print(pNode.text())
                        if pNode.text() == parentName:
                            parentNode = pNode
                            a = False
                            break
                    if not parentNode:
                        topNode = pNode
                        topNode.text()
                    c += 1
                    if c == 10:
                        a = False
            else:
                for pNode in parentNodes:
                    print(pNode.text(), parentName)
                    if pNode.text() == parentName:
                        parentNode = pNode
                        break
            parentNode.appendRow(childNode)

        '''
        if not childName:
            parentNode = QStandardItem(parentName)
            model.appendRow(parentNode)
        else:
            topNode = model.item(0)
            childNode = QStandardItem(childName)
            parentNode = None
            parentNodes = model.findItems(parentName)
            if len(parentNodes) == 0:
                print(len(parentNodes))
                print(topNode.hasChildren())
                if topNode.hasChildren():
                    childrenCount = topNode.rowCount()
                    print(childrenCount)
                    for i in range(childrenCount):
                        pNode = topNode.child(i)
                        print(pNode.text())
                        if pNode.text() == parentName:
                            parentNode = pNode
                            break
            else:
                for pNode in parentNodes:
                    print(pNode.text(), parentName)
                    if pNode.text() == parentName:
                        parentNode = pNode
                        break
            parentNode.appendRow(childNode)
        '''
        '''
        for child in childrenNamesList:
            if type(child) == str:
                model.appendRow(QStandardItem(child))
            else:
                print(child)
                parentName = child[0]
                parentNode = QStandardItem(parentName)
                parentNodes = model.findItems(parentName)
                if len(parentNodes) > 0:
                    for pNode in parentNodes:
                        print(pNode.text(), parentName)
                        if pNode.text() == parentName:
                            parentNode = pNode
                            break
                parentNode.appendRow(QStandardItem(child[1]))
        '''
        self.dlg.treeView.setModel(model)

    def _configDialogs(self):
        """Configures dialog and connects signals/slots."""

        # Set window icon
        self.dlg.setWindowIcon(self.pluginIcon)

        # Signals
        self.dlg.pushButton_Dir.clicked.connect(self.dlgDirSaida)
        self.dlg.treeView.clicked.connect(self.treeViewClicked)

        # Populate combo for product selection
        r = [u'Malhas Municipais']
        self.populateComboListBox(self.dlg.comboBox_Produto, r)

        # Populate combo for year selection
        url = 'https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/'
        self.htmlParser.reset()
        self.htmlParser.feed(http.client.parse_headers(urllib.request.urlopen(url)).as_string())
        parent = os.path.basename(os.path.normpath(url)).replace('_', ' ').title()
        # Add top parent to the tree
        self._addTreeViewParentChildrenNodes(parent)
        children = self.htmlParser.getChildren()
        r = []
        listParentChild = []
        nextUrls = []
        # Add all children and others to the tree
        #print(children)
        for child in children:
            self._addTreeViewParentChildrenNodes(parent.replace('/', ''), child.replace('/', ''))
            listParentChild.append([parent.replace('/', ''), child.replace('/', '')])
            #print([parent, child])
            nextUrls = []
            if child.endswith('/'):
                urlChild = url + child
                nextUrls.append(urlChild)
                while nextUrls:
                    for u in nextUrls:
                        #print(u)
                        self.htmlParser.resetParent()
                        self.htmlParser.resetChildren()
                        self.htmlParser.feed(http.client.parse_headers(urllib.request.urlopen(u)).as_string())
                        parent = os.path.basename(os.path.normpath(u))
                        if '.' in parent:
                            parent = os.path.basename(os.path.dirname(os.path.normpath(u)))
                        #parent = self.htmlParser.getParent()
                        childrenChildren = self.htmlParser.getChildren()
                        if childrenChildren:
                            #print(childrenChildren)
                            for childrenChild in childrenChildren:
                                self._addTreeViewParentChildrenNodes(parent.replace('/', ''), childrenChild.replace('/', ''))
                                listParentChild.append([parent.replace('/', ''), childrenChild.replace('/', '')])
                                if childrenChild.endswith('/'):
                                    urlChildChild = u + childrenChild
                                    nextUrls.append(urlChildChild)
                        nextUrls.remove(u)
                    parent = os.path.basename(os.path.normpath(url)).replace('_', ' ').title()

        #for i in listParentChild:
        #    self._addTreeViewParentChildrenNodes(i[0], i[1])


        self.populateComboListBox(self.dlg.comboBox_Ano, r)
        

        # Populate combo for Federal Unity selection
        r = [u'BR - Brasil', u'AC - Acre', u'AL - Alagoas', u'AM - Amazonas', u'AP - AmapÃ¡', u'BA - Bahia', u'CE - CearÃ¡', u'DF - Distrito Federal', u'ES - EspÃ­rito Santo',
             u'GO - GoiÃ¡s', u'MA - MaranhÃ£o', u'MG - Minas Gerais', u'MS - Mato Grosso do Sul', u'MT - Mato Grosso', u'PA - ParÃ¡', u'PB - ParaÃ­ba', u'PE - Pernambuco',
             u'PI - PiauÃ­', u'PR - ParanÃ¡', u'RJ - Rio de Janeiro', u'RN - Rio Grande do Norte', u'RR - Roraima', u'RS - Rio Grande do Sul', u'SC - Santa Catarina',
             u'SE - Sergipe', u'SP - SÃ£o Paulo', u'TO - Tocantins', u'RO â RondÃ´nia']
        self.populateComboListBox(self.dlg.comboBox_Unidade, r)

        # Populate combo for type selection
        r = [u'Todos', u'Unidades da FederaÃ§Ã£o', u'MunicÃ­pios', u'MicrorregiÃµes', u'MesorregiÃµes']
        self.populateComboListBox(self.dlg.comboBox_Tipo, r)

    def _getFileSize(self, url):
        """Returns file size of the url"""

        u = urllib.request.urlopen(url)
        meta = u.headers
        fileSize = int(meta.get('Content-Length'))
        return fileSize

    def _execute(self):
        """Does the real work:
           -Download file
           -Extract file
           -Add selected statistical data
           -Add layer to legend panel"""

        # Getting selected variables
        ano = self.dlg.comboBox_Ano.currentText()
        uf = self.dlg.comboBox_Unidade.currentText()[:2]
        fileName = uf.lower() + '_' + self._padronizaTexto(self.dlg.comboBox_Tipo.currentText()) + '.zip'
        if ano == '2020':
            fileName = '{uf}_{product}_{yyyy}.zip'.format(uf=uf, product=self._padronizaTexto(self.dlg.comboBox_Tipo.currentText()).capitalize(), yyyy=ano)
        if self.dlg.comboBox_Tipo.currentText() == 'Todos':
            fileName = uf + '.zip'
        
        tp = 'UFs'
        if uf == 'BR':
            tp = 'Brasil'
        url = 'https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_{yyyy}/{type}/{uf}/{file}'.format(yyyy=ano, type=tp, uf=uf, file=fileName)

        dirPad = os.path.join(self.dirSaida, ano)
        outFile = os.path.join(dirPad, fileName)
        self.barMax = self._getFileSize(url)
        #print(self.barMax)

        self.dlgBar, self.progressBar = self._progressDialog(0)
        self.dlgBar.show()
        self.msgBar.pushMessage('Processing',u'Working on selected data...', Qgis.Info, duration=0)
        
        # Instantiate the background worker
        self.taskDesc = u'Processing selected data.'
        self.threadTask = WorkerDownloadManager(self.iface, self.taskDesc, url, dirPad, outFile, self.barMax)
        self.threadTask.begun.connect(lambda: self.setProgressText(self.taskDesc))
        self.threadTask.progressChanged.connect(self.setProgressValue)
        self.threadTask.textProgress.connect(self.setProgressText)
        self.threadTask.processResult.connect(self.threadResult)
        self.threadTask.taskCompleted.connect(self.endingProcess)
        #self.threadTask.taskTerminated.connect(lambda: self.dlgBar.close())
        self.taskManager.addTask(self.threadTask)
        # Hide QGIS native progress button
        self.qgisProgressButton.hide()

    def run(self):
        """Run method - plugin callback"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.firstStart == True:
            self.firstStart = False
            self.dlg = IbgeDataDownloaderDialog()
            self._configDialogs()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            self._execute()
